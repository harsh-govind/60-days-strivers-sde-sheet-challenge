71. Same tree
https://leetcode.com/problems/same-tree/
class Solution
{
    public:
        bool isSameTree(TreeNode *p, TreeNode *q)
        {
            if (p == nullptr and q == nullptr)
            {
                return true;
            }

            if ((p == nullptr and q != nullptr) or(q == nullptr and p != nullptr))
            {
                return false;
            }

            bool left = isSameTree(p->left, q->left);
            bool right = isSameTree(p->right, q->right);

            return left and right and p->val == q->val;
        }
};

72. Boundary traversal of binary tree
https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1
class Solution {
public:
    void traversalLeft(Node *root, vector<int> &ans)
    {
        if(root == NULL or (root->left ==NULL and root->right==NULL))
        {
            return;
        }
        
        ans.push_back(root->data);
        
        if(root->left)
        {
            traversalLeft(root->left, ans);
        }
        else
        {
            traversalLeft(root->right, ans);
        }
    }
    void traversalLeaf(Node *root, vector<int> &ans)
    {
        if(root == NULL)
        {
            return;
        }
        
        if(root->left==NULL and root->right==NULL)
        {
            ans.push_back(root->data);
        }

        traversalLeaf(root->left, ans);

        traversalLeaf(root->right, ans);
    }
    void traversalRight(Node *root, vector<int> &ans)
    {
        if(root == NULL or (root->left ==NULL and root->right==NULL))
        {
            return;
        }
        
        if(root->right)
        {
            traversalRight(root->right, ans);
        }
        else
        {
            traversalRight(root->left, ans);
        }
        ans.push_back(root->data);
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        if(root==NULL)
        {
            return ans;
        }
        
        ans.push_back(root->data);
        traversalLeft(root->left, ans);
        
        traversalLeaf(root->left, ans);
        traversalLeaf(root->right, ans);
        
        traversalRight(root->right, ans);
        
        return ans;
        
    }
};