73. Construct Binary Tree from Preorder and Inorder Traversal
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
class Solution {
public:
    TreeNode *solve(int &preIdx, int inStart, int inEnd, vector<int> &pre, vector<int> &in, unordered_map<int, int> &m, int n)
    {
        if(preIdx>=n or inStart>inEnd)
        {
            return nullptr;
        }
        
        int element = pre[preIdx++];
        int position = m[element];
        
        TreeNode *root=new TreeNode(element);
        root->left=solve(preIdx, inStart, position-1, pre, in, m, n);
        root->right=solve(preIdx, position+1, inEnd, pre, in, m, n);
        
        return root;

    }
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
        unordered_map<int, int> m;
        int n=in.size();
        for(int i=0; i<n; i++)
        {
            m[in[i]]=i;
        }
        int preIdx=0;
        return solve(preIdx, 0, n-1, pre, in, m, n);
        
    }
};

74. Construct Binary Tree from Inorder and Postorder Traversal
https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
class Solution
{
    public:

        int postindex;

    TreeNode* solve(vector<int> &inorder, vector<int> &postorder, int is, int end, unordered_map< int, int> &mp)
    {

        if (is > end) return NULL;

        TreeNode *root = new TreeNode(postorder[postindex]);
        int position = mp[postorder[postindex]];
        postindex--;

        root->right = solve(inorder, postorder, position + 1, end, mp);
        root->left = solve(inorder, postorder, is, position - 1, mp);

        return root;
    }

    TreeNode* buildTree(vector<int> &inorder, vector<int> &postorder)
    {

        postindex = inorder.size() - 1;
        unordered_map<int, int> mp;
        for (int i = 0; i < inorder.size(); i++)
        {
            mp[inorder[i]] = i;
        }

        return solve(inorder, postorder, 0, inorder.size() - 1, mp);
    }
};
