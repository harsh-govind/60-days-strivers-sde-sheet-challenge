58. Kth Largest Element
https://leetcode.com/problems/kth-largest-element-in-an-array/

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
       priority_queue<int, vector<int>, greater<int>> pq;
        
        for(auto &val:nums)
        {
            pq.push(val);
            if(pq.size()>k)
            {
                pq.pop();
            }
        }
        return pq.top();
    }
};

59. Stock span problem
https://www.codingninjas.com/codestudio/problems/stock-span_5243295?leftPanelTab=0

#include <bits/stdc++.h> 
vector<int> findStockSpans(vector<int>& prices) 
{
    vector<int> ans;
    stack<pair<int, int>> stk;

    for(int i=0; i<prices.size(); i++)
    {
        if(stk.size()==0)
        {
            ans.push_back(-1);
        }
        else if(stk.size()>0 and stk.top().first>prices[i])
        {
            ans.push_back(stk.top().second);
        }
        else if(stk.size()>0 and stk.top().first<=prices[i])
        {
            while(stk.size()>0 and stk.top().first<prices[i])
            {
                stk.pop();
            }

            if(stk.size()==0)
            {
                ans.push_back(-1);
            }
            else
            {
                ans.push_back(stk.top().second);
            }
        }
        stk.push({prices[i], i});
    }
    for(int i=0; i<ans.size(); i++)
    {
        ans[i]=i-ans[i];
    }
    return ans;
}

60. The Celebrity Problem
https://practice.geeksforgeeks.org/problems/the-celebrity-problem/1#
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& m, int n) 
    {
        stack<int> s;
        for(int i=0; i<n; i++)
        {
            s.push(i);
        }
        
        while(s.size()>=2)
        {
            int i=s.top();
            s.pop();
            int j=s.top();
            s.pop();
            
            //if i knows j then j may be the celebrity
            if(m[i][j]==1)
            {
                s.push(j);
            }
            else
            {
                s.push(i);
            }
        }
        // int possible=s.top(), rowSum=0, colSum=0;
        // for(int i=0; i<n; i++)
        // {
        //     rowSum+=m[possible][i];
        //     colSum+=m[i][possible];
        // }
        // if(colSum==n-1 and rowSum==0) return possible;
        
        //or
        
        int possible=s.top();
        for(int i=0; i<n; i++)
        {
            if(i!=possible)
            {
                if(m[possible][i]==1 or m[i][possible]==0)
                {
                    return -1;
                }
            }
        }
        return possible;
    }
};


