83. Transform to sum tree
https://practice.geeksforgeeks.org/problems/transform-to-sum-tree/1
class Solution {
  public:
  
    // Convert a given tree to a tree where every node contains sum of values of
    // nodes in left and right subtrees in the original tree
    int solve(Node *&root)
    {
        if(!root) return 0;
        
        if(!root->right and !root->left)
        {
            int x=root->data;
            root->data=0;
            return x;
        }
        
        int left=solve(root->left);
        int right=solve(root->right);
        
        int x=root->data;
        root->data=left+right;
        
        return root->data+x;
    }
    void toSumTree(Node *&node)
    {
        // Your code here
        solve(node);
    }
};
84. Search in a Binary Search Tree
https://leetcode.com/problems/search-in-a-binary-search-tree/
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int x) {
        if(!root)
            return nullptr;
        
        if(root->val==x)
            return root;
        else if(x>root->val)
            return searchBST(root->right, x);
        else
            return searchBST(root->left, x);
    }
};

85 Validate Binary Search Tree
https://leetcode.com/problems/validate-binary-search-tree/
class Solution
{
    public:
        bool solve(TreeNode *root, long long low, long long high)
        {
            if (!root) return true;

            bool current = root->val > low and root->val < high;
            bool left = solve(root->left, low, root->val);
            bool right = solve(root->right, root->val, high);

            return current and left and right;
        }
    bool isValidBST(TreeNode *root)
    {
        return solve(root, -9999999999, 9999999999);
    }
};