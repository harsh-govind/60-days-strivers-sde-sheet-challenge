77. Boundary traversal of binary tree
https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1
class Solution {
public:
    void traversalLeft(Node *root, vector<int> &ans)
    {
        if(root == NULL or (root->left ==NULL and root->right==NULL))
        {
            return;
        }
        
        ans.push_back(root->data);
        
        if(root->left)
        {
            traversalLeft(root->left, ans);
        }
        else
        {
            traversalLeft(root->right, ans);
        }
    }
    void traversalLeaf(Node *root, vector<int> &ans)
    {
        if(root == NULL)
        {
            return;
        }
        
        if(root->left==NULL and root->right==NULL)
        {
            ans.push_back(root->data);
        }

        traversalLeaf(root->left, ans);

        traversalLeaf(root->right, ans);
    }
    void traversalRight(Node *root, vector<int> &ans)
    {
        if(root == NULL or (root->left ==NULL and root->right==NULL))
        {
            return;
        }
        
        if(root->right)
        {
            traversalRight(root->right, ans);
        }
        else
        {
            traversalRight(root->left, ans);
        }
        ans.push_back(root->data);
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        if(root==NULL)
        {
            return ans;
        }
        
        ans.push_back(root->data);
        traversalLeft(root->left, ans);
        
        traversalLeaf(root->left, ans);
        traversalLeaf(root->right, ans);
        
        traversalRight(root->right, ans);
        
        return ans;
        
    }
};

78. Flatten binary tree into linked list
https://leetcode.com/problems/flatten-binary-tree-to-linked-list/
class Solution
{
    public:
        TreeNode* predecessor(TreeNode *current)
        {
            TreeNode *ans = current->left;
            while (ans->right and ans->right != current)
            {
                ans = ans->right;
            }
            return ans;
        }
    void flatten(TreeNode *root)
    {
        TreeNode *curr = root;

        while (curr)
        {
            if (curr->left)
            {
                TreeNode *pre = predecessor(curr);
                pre->right = curr->right;
                curr->right = curr->left;
                curr->left = nullptr;
                curr = curr->right;
            }
            else
            {
                curr = curr->right;
            }
        }
    }
};