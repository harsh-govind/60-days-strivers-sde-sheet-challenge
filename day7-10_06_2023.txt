25. Linked List Cycle
https://leetcode.com/problems/linked-list-cycle/
class Solution
{
    public:
        bool hasCycle(ListNode *head)
        {
            ListNode *p = head, *q = head;
            if (!p)
            {
                return false;
            }
            do {
                p = p->next;
                q = q->next;
                if (q)
                {
                    q = q->next;
                    if (p == q)
                    {
                        return true;
                    }
                }
            } while (p != q and p and q);

            return false;
        }
};

26. Reverse nodes in k-group
https://leetcode.com/problems/reverse-nodes-in-k-group/
class Solution
{
    public:
        int length(ListNode *head)
        {
            int ans = 0;
            while (head)
            {
                ans++;
                head = head->next;
            }
            return ans;
        }
    ListNode* reverseg(int len, ListNode *head, int k)
    {
        if (len < k)
        {
            return head;
        }

        ListNode *p = head, *q = nullptr, *r = nullptr;
        int count = 0;

        while (count < k and p)
        {
            r = q;
            q = p;
            p = p->next;
            q->next=r;
            count++;
        }
        if (p)
        {
            head->next = reverseg(len - k, p, k);
        }
        return q;
    }
    ListNode* reverseKGroup(ListNode *head, int k)
    {
        int len = length(head);
        return reverseg(len, head, k);
    }
};

27. Palindrome Linked List
https://leetcode.com/problems/palindrome-linked-list/
class Solution
{
    public:
        bool isPalindrome(ListNode *head)
        {
            string s = "";
            ListNode *p = head;

            while (p)
            {
                s += to_string(p->val);
                p = p->next;
            }

            for (int i = 0; i < s.size(); i++)
            {
                if (s[i] != s[s.size() - i - 1])
                {
                    return false;
                }
            }
            return true;
        }
};

28. Linked List Cycle II
https://leetcode.com/problems/linked-list-cycle-ii/

class Solution
{
    public:
        ListNode* detectCycle(ListNode *head)
        {
            ListNode *slow = head, *fast = head;
            if (!head)
            {
                return nullptr;
            }
            do {
                slow = slow->next;
                fast = fast->next;
                if (fast)
                {
                    fast = fast->next;
                    if (fast == slow)
                    {
                        break;
                    }
                }
            } while (fast != slow and slow and fast);

            if (!slow or !fast)
            {
                return nullptr;
            }

            slow = head;

            while (slow != fast)
            {
                slow = slow->next;
                fast = fast->next;
            }

            return slow;
        }
};